import os
import subprocess
from abc import abstractmethod
from typing import Union

from pydantic import BaseModel


class TaskInputRunner(BaseModel):
    @abstractmethod
    def run(self) -> str:
        raise NotImplementedError("Subclasses must implement this method")


class WriteFileTaskInput(TaskInputRunner):
    file_name: str
    file_content: str

    def run(self) -> str:
        """
        Attempts to write content to a specified file and returns 'Done' on success.
        If the write operation fails, it returns only the specific error message related to the file write failure.

        Returns:
        str: 'Done' if successful, or the error message from the file writing operation if it fails.
        """
        try:
            with open(self.file_name, 'w') as file:
                file.write(self.file_content)
            # Verify file write by checking existence
            if os.path.exists(self.file_name):
                return "Done"
            else:
                return "Error: File does not exist after writing."
        except Exception as e:
            return str(e)


class CommandTaskInput(TaskInputRunner):
    command: str

    def run(self) -> str:
        """
        Executes the specified command using the system shell and returns the output.
        If the command fails, it returns the error generated by the command.

        Returns:
        str: The output of the command if successful, or the error message if it fails.
        """
        try:
            result = subprocess.run(self.command, shell=True, check=True, text=True, stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)
            return result.stdout or "Done"
        except subprocess.CalledProcessError as e:
            # Returning the stderr if an error occurs
            return e.stderr


class ReadFileTaskInput(TaskInputRunner):
    file_name: str

    def run(self) -> str:
        """
        Attempts to read the content of a file specified by file_name and returns the content.
        If the read operation fails, it returns the error message from the exception directly.

        Returns:
        str: The content of the file if successful, or the raw error message if the read operation fails.
        """
        try:
            with open(self.file_name, 'r') as file:
                content = file.read()
            return content
        except Exception as e:
            # Directly return the exception message, ensuring no additional text is included.
            return str(e)


TaskInput = Union[WriteFileTaskInput, CommandTaskInput, ReadFileTaskInput]


class Task(BaseModel):
    current_objective: str
    required_task: str
    task_input: TaskInput
